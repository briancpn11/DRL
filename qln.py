


# -*- coding: utf-8 -*-
"""dqn_keras.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1gc_PdpTm2WrnpAleEALcYBo13RVc8gun
"""

import numpy as np
import matplotlib.pyplot as plt

class Agent(object):
  def __init__(self, alpha, gamma, n_actions, n_states, epsilon, epsilon_dec=0.99, epsilon_end=0.01):
    self.action_space = [i for i in range(n_actions)]
    self.n_actions = n_actions
    self.alpha = alpha
    self.gamma = gamma
    self.epsilon = epsilon
    self.epsilon_dec = epsilon_dec
    self.epsilon_min = epsilon_end
    self.q_table = np.zeros((n_states, n_actions), dtype = float)

  def choose_action(self, state):
    rand = np.random.random()
    if rand < self.epsilon:
      action = np.random.choice(self.action_space)
    else:
      actions = self.q_table[state, :]
      action = np.argmax(actions)

    return action

  def learn(self, state, action, reward, state_, done):

    q_target = reward + self.gamma * np.max(self.q_table[state_, :]) * done
    q_delta = q_target - self.q_table[state, action]
    self.q_table[state, action] += self.alpha * q_delta
    
    self.epsilon = self.epsilon * self.epsilon_dec if self.epsilon > self.epsilon_min else self.epsilon_min
    
from gridworld import GridWorldEnv

if __name__ == "__main__":
  env = GridWorldEnv()
  n_games = 500
  agent = Agent(alpha = 0.6, gamma = 1.0, epsilon = 0.5, n_states = env.stateCount, n_actions = env.actionCount)
  stateDict = env.stateDict
  scores = []

  for i in range(n_games):
    done = False
    score = 0
    observation = env.reset()
    while not done:
      action = agent.choose_action(stateDict.get(observation))
      observation_, reward, done, info = env.step(action)
      score += reward
      agent.learn(stateDict.get(observation), action, reward, stateDict.get(observation_), done)
      observation = observation_

    scores.append(score)

    avg_score = np.mean(scores[max(0, i - 100): (i+1)])
    print('episode ', i, 'score %.2f' % score, 'average score %.2f' % avg_score)

  x = [i+1 for i in range(n_games)]
  plt.plot(x, scores)

